{"version":3,"sources":["components/Card.js","components/Cardlist.js","components/Searchbox.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","_ref","name","rotation_period","orbital_period","diameter","climate","gravity","terrain","population","react_default","a","createElement","className","Cardlist","planets","map","planet","i","console","log","src_components_Card","key","Searchbox","searchfield","searchChange","type","placeholder","onChange","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","target","value","state","_this2","fetch","then","response","json","results","_this$state","filteredPlanets","filter","toLowerCase","includes","length","components_Searchbox","src_components_Cardlist","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mQAkBeA,eAfF,SAAAC,GAA+F,IAA5FC,EAA4FD,EAA5FC,KAAMC,EAAsFF,EAAtFE,gBAAiBC,EAAqEH,EAArEG,eAAgBC,EAAqDJ,EAArDI,SAAUC,EAA2CL,EAA3CK,QAASC,EAAkCN,EAAlCM,QAASC,EAAyBP,EAAzBO,QAASC,EAAgBR,EAAhBQ,WAC3F,OACCC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACdH,EAAAC,EAAAC,cAAA,UAAMV,GACNQ,EAAAC,EAAAC,cAAA,yBAAkBH,GAClBC,EAAAC,EAAAC,cAAA,8BAAuBT,GACvBO,EAAAC,EAAAC,cAAA,6BAAsBR,GACtBM,EAAAC,EAAAC,cAAA,uBAAgBP,GAChBK,EAAAC,EAAAC,cAAA,sBAAeN,GACfI,EAAAC,EAAAC,cAAA,sBAAeL,GACfG,EAAAC,EAAAC,cAAA,sBAAeJ,MCgBHM,SAzBE,SAAAb,GAAiB,IAAdc,EAAcd,EAAdc,QACnB,OACCL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAEbE,EAAQC,IAAI,SAACC,EAAQC,GAEpB,OADAC,QAAQC,IAAIH,GAEXP,EAAAC,EAAAC,cAACS,EAAD,CACCC,IAAQJ,EACRhB,KAASe,EAAOf,KAChBC,gBAAoBc,EAAOd,gBAC3BC,eAAmBa,EAAOb,eAC1BC,SAAaY,EAAOZ,SACpBC,QAAYW,EAAOX,QACnBC,QAAYU,EAAOV,QACnBC,QAAYS,EAAOT,QACnBC,WAAeQ,EAAOR,kBCNdc,EAZG,SAAAtB,GAAmCA,EAAhCuB,YAAgC,IAAnBC,EAAmBxB,EAAnBwB,aACjC,OACCf,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,SACCc,KAAK,SACLC,YAAY,iBACZC,SAAWH,MCgCAI,cAlCd,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACbC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAaDI,eAAiB,SAAAC,GAChBR,EAAKS,SAAS,CAAEf,YAAac,EAAME,OAAOC,SAb1CX,EAAKY,MAAQ,CACZ3B,QAAS,GACTS,YAAa,IAJDM,mFAQM,IAAAa,EAAAV,KACnBW,MAAM,gCACJC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAA9B,GAAO,OAAI4B,EAAKJ,SAAS,CAAExB,QAASA,EAAQiC,6CAO3C,IAAAC,EACyBhB,KAAKS,MAA9B3B,EADAkC,EACAlC,QAASS,EADTyB,EACSzB,YACX0B,EAAkBnC,EAAQoC,OAAO,SAAAlC,GACtC,OAAOA,EAAOf,KAAKkD,cAAcC,SAAS7B,EAAY4B,iBAEvD,OAAQrC,EAAQuC,OAGf5C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACdH,EAAAC,EAAAC,cAAC2C,EAAD,CAAW9B,aAAeQ,KAAKI,iBAC/B3B,EAAAC,EAAAC,cAAC4C,EAAD,CAAUzC,QAAUmC,KAJtBxC,EAAAC,EAAAC,cAAA,4BAzBgB6C,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtD,EAAAC,EAAAC,cAACqD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,KAAK,SAAA0B,GACjCA,EAAaC","file":"static/js/main.dbae1076.chunk.js","sourcesContent":["import React from 'react';\nimport './Card.css';\n\nconst Card = ({ name, rotation_period, orbital_period, diameter, climate, gravity, terrain, population}) => {\n\treturn(\n\t\t<div className=\"card\">\n\t\t\t<h2>{ name }</h2>\n\t\t\t<h4>Population: { population }</h4>\n\t\t\t<h4>Rotation Period: { rotation_period }</h4>\n\t\t\t<h4>Orbital Period: { orbital_period }</h4>\n\t\t\t<h4>Diameter: { diameter }</h4>\n\t\t\t<h4>Climate: { climate }</h4>\n\t\t\t<h4>Gravity: { gravity }</h4>\n\t\t\t<h4>Terrain: { terrain }</h4>\n\t\t</div>\n\t)\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\nimport './Cardlist.css'\n\nconst Cardlist = ({ planets }) => {\n\treturn(\n\t\t<div className=\"cardlist\">\n\t\t\t{\n\t\t\t\tplanets.map((planet, i) => {\n\t\t\t\t\tconsole.log(planet);\n\t\t\t\t\treturn(\n\t\t\t\t\t\t<Card\n\t\t\t\t\t\t\tkey = { i }\n\t\t\t\t\t\t\tname = { planet.name }\n\t\t\t\t\t\t\trotation_period = { planet.rotation_period }\n\t\t\t\t\t\t\torbital_period = { planet.orbital_period }\n\t\t\t\t\t\t\tdiameter = { planet.diameter }\n\t\t\t\t\t\t\tclimate = { planet.climate }\n\t\t\t\t\t\t\tgravity = { planet.gravity }\n\t\t\t\t\t\t\tterrain = { planet.terrain }\n\t\t\t\t\t\t\tpopulation = { planet.population }\n\t\t\t\t\t\t/>\n\t\t\t\t\t);\n\t\t\t\t})\n\t\t\t}\n\t\t</div>\n\t);\n}\n\nexport default Cardlist;","import React from 'react';\n\nconst Searchbox = ({ searchfield, searchChange }) => {\n\treturn(\n\t\t<div>\n\t\t\t<input \n\t\t\t\ttype=\"search\"\n\t\t\t\tplaceholder=\"Search Planets\"\n\t\t\t\tonChange={ searchChange }\n\t\t\t/>\n\t\t</div>\n\t);\n}\n\nexport default Searchbox;","import React, { Component } from 'react';\nimport './App.css';\nimport Cardlist from '../components/Cardlist';\nimport Searchbox from '../components/Searchbox';\n\nclass App extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tplanets: [],\n\t\t\tsearchfield: ''\n\t\t}\n\t}\n\n\tcomponentDidMount() {\n\t\tfetch('https://swapi.co/api/planets')\n\t\t\t.then(response => response.json())\n\t\t\t.then(planets => this.setState({ planets: planets.results }));\n\t}\n\n\tonSearchChange = event => {\n\t\tthis.setState({ searchfield: event.target.value });\n\t}\n\n\trender() {\n\t\tconst { planets, searchfield } = this.state;\n\t\tconst filteredPlanets = planets.filter(planet => {\n\t\t\treturn planet.name.toLowerCase().includes(searchfield.toLowerCase());\n\t\t});\n\t\treturn !planets.length ?\n\t\t<h1>loading</h1> :\n\t\t(\n\t\t\t<div className=\"App\">\n\t\t\t\t<Searchbox searchChange={ this.onSearchChange } />\n\t\t\t\t<Cardlist planets={ filteredPlanets } />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}